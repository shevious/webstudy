#include <iostream>
#include <cstring>

using namespace std;

enum BOOL { FALSE = 0, TRUE};

static const char _info_array[203][12] =
{
	/* 1841 */     
	1, 2, 4, 1, 1, 2,    1, 2, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1,    2, 1, 2, 1, 2, 1,
	2, 2, 2, 1, 2, 1,    4, 1, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 1,    2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 5, 2,    1, 2, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2,    1, 2, 2, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 1, 2, 2, 2, 1,
	2, 1, 2, 3, 2, 1,    2, 1, 2, 1, 2, 2,
	2, 1, 2, 1, 1, 2,    1, 1, 2, 2, 1, 2,

	/* 1851 */     
	2, 2, 1, 2, 1, 1,    2, 1, 2, 1, 5, 2,
	2, 1, 2, 2, 1, 1,    2, 1, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2,    5, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 2,    1, 2, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2,    1, 2, 2, 2, 1, 2,
	1, 2, 1, 1, 5, 2,    1, 2, 1, 2, 2, 2,
	1, 2, 1, 1, 2, 1,    1, 2, 2, 1, 2, 2,
	2, 1, 2, 1, 1, 2,    1, 1, 2, 1, 2, 2,
	2, 1, 6, 1, 1, 2,    1, 1, 2, 1, 2, 2,

	/* 1861 */     
	1, 2, 2, 1, 2, 1,    2, 1, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 2,    1, 2, 2, 3, 1, 2,
	1, 2, 2, 1, 2, 1,    2, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1,    2, 2, 1, 2, 2, 1,
	2, 1, 1, 2, 4, 1,    2, 2, 1, 2, 2, 1,
	2, 1, 1, 2, 1, 1,    2, 2, 1, 2, 2, 2,
	1, 2, 1, 1, 2, 1,    1, 2, 1, 2, 2, 2,
	1, 2, 2, 3, 2, 1,    1, 2, 1, 2, 2, 1,
	2, 2, 2, 1, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 2, 2, 1, 2, 1,    2, 1, 1, 5, 2, 1,

	/* 1871 */     
	2, 2, 1, 2, 2, 1,    2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 1,    2, 1, 2, 2, 1, 2,
	1, 1, 2, 1, 2, 4,    2, 1, 2, 2, 1, 2,
	1, 1, 2, 1, 2, 1,    2, 1, 2, 2, 2, 1,
	2, 1, 1, 2, 1, 1,    2, 1, 2, 2, 2, 1,
	2, 2, 1, 1, 5, 1,    2, 1, 2, 2, 1, 2,
	2, 2, 1, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	2, 2, 1, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 2, 4, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 2,    2, 1, 2, 1, 1, 2,
	
	/* 1881 */     
	1, 2, 1, 2, 1, 2,    5, 2, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2,    1, 2, 2, 1, 2, 2,
	1, 1, 2, 1, 1, 2,    1, 2, 2, 2, 1, 2,
	2, 1, 1, 2, 3, 2,    1, 2, 2, 1, 2, 2,
	2, 1, 1, 2, 1, 1,    2, 1, 2, 1, 2, 2,
	2, 1, 2, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	2, 2, 1, 5, 2, 1,    1, 2, 1, 2, 1, 2,
	2, 1, 2, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 5, 2, 1, 2, 2,    1, 2, 1, 2, 1, 2,
	
	/* 1891 */     
	1, 2, 1, 2, 1, 2,    1, 2, 2, 1, 2, 2,
	1, 1, 2, 1, 1, 5,    2, 2, 1, 2, 2, 2,
	1, 1, 2, 1, 1, 2,    1, 2, 1, 2, 2, 2,
	1, 2, 1, 2, 1, 1,    2, 1, 2, 1, 2, 2,
	2, 1, 2, 1, 5, 1,    2, 1, 2, 1, 2, 1,
	2, 2, 2, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 2, 1,    2, 1, 2, 1, 2, 1,
	2, 1, 5, 2, 2, 1,    2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1,    2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 5, 2, 2, 1, 2,
	
	/* 1901 */     
	1, 2, 1, 1, 2, 1,    2, 1, 2, 2, 2, 1,
	2, 1, 2, 1, 1, 2,    1, 2, 1, 2, 2, 2,
	1, 2, 1, 2, 3, 2,    1, 1, 2, 2, 1, 2,
	2, 2, 1, 2, 1, 1,    2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1,    1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2,    2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 2, 1,    2, 1, 2, 2, 1, 2,
	1, 5, 1, 2, 1, 2,    1, 2, 2, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 1, 2, 2, 2, 1,

	/* 1911 */     
	2, 1, 2, 1, 1, 5,    1, 2, 2, 1, 2, 2,
	2, 1, 2, 1, 1, 2,    1, 1, 2, 2, 1, 2,
	2, 2, 1, 2, 1, 1,    2, 1, 1, 2, 1, 2,
	2, 2, 1, 2, 5, 1,    2, 1, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2,    2, 1, 2, 1, 2, 1,
	2, 3, 2, 1, 2, 2,    1, 2, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2,    1, 2, 2, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    5, 2, 2, 1, 2, 2,
	1, 2, 1, 1, 2, 1,    1, 2, 2, 1, 2, 2,

	/* 1921 */     
	2, 1, 2, 1, 1, 2,    1, 1, 2, 1, 2, 2,
	2, 1, 2, 2, 3, 2,    1, 1, 2, 1, 2, 2,
	1, 2, 2, 1, 2, 1,    2, 1, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 2,    1, 2, 1, 2, 1, 1,
	2, 1, 2, 5, 2, 1,    2, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1,    2, 2, 1, 2, 2, 1,
	2, 1, 1, 2, 1, 2,    1, 2, 2, 1, 2, 2,
	1, 5, 1, 2, 1, 1,    2, 2, 1, 2, 2, 2,
	1, 2, 1, 1, 2, 1,    1, 2, 1, 2, 2, 2,
	1, 2, 2, 1, 1, 5,    1, 2, 1, 2, 2, 1, 

	/* 1931 */    
	2, 2, 2, 1, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 2, 2, 1, 2, 1,    2, 1, 1, 2, 1, 2,
	1, 2, 2, 1, 6, 1,    2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 1,    2, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1,    2, 2, 1, 2, 2, 1, 
	2, 1, 4, 1, 2, 1,    2, 1, 2, 2, 2, 1,
	2, 1, 1, 2, 1, 1,    2, 1, 2, 2, 2, 1,
	2, 2, 1, 1, 2, 1,    4, 1, 2, 2, 1, 2,
	2, 2, 1, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	2, 2, 1, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	
	/* 1941 */     
	2, 2, 1, 2, 2, 4,    1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 2,    2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2,    2, 1, 2, 2, 1, 2,
	1, 1, 2, 4, 1, 2,    1, 2, 2, 1, 2, 2,
	1, 1, 2, 1, 1, 2,    1, 2, 2, 2, 1, 2, 
	2, 1, 1, 2, 1, 1,    2, 1, 2, 2, 1, 2,
	2, 5, 1, 2, 1, 1,    2, 1, 2, 1, 2, 2,
	2, 1, 2, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	2, 2, 1, 2, 1, 2,    3, 2, 1, 2, 1, 2,
	2, 1, 2, 2, 1, 2,    1, 1, 2, 1, 2, 1, 

	/* 1951 */     
	2, 1, 2, 2, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 2,    1, 2, 2, 1, 2, 2,
	1, 1, 2, 1, 1, 2,    1, 2, 2, 1, 2, 2,
	2, 1, 4, 1, 1, 2,    1, 2, 1, 2, 2, 2,
	1, 2, 1, 2, 1, 1,    2, 1, 2, 1, 2, 2,
	2, 1, 2, 1, 2, 1,    1, 5, 2, 1, 2, 2,
	1, 2, 2, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 2, 1,    2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 5,    2, 1, 2, 1, 2, 1, 

	/* 1961 */     
	2, 1, 2, 1, 2, 1,    2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 2, 1, 2, 2, 1,
	2, 1, 2, 3, 2, 1,    2, 1, 2, 2, 2, 1,
	2, 1, 2, 1, 1, 2,    1, 2, 1, 2, 2, 2,
	1, 2, 1, 2, 1, 1,    2, 1, 1, 2, 2, 1, 
	2, 2, 5, 2, 1, 1,    2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1,    1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 2, 1,    5, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2,    2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 2, 1,    2, 1, 2, 2, 1, 2,
	
	/* 1971 */     
	1, 2, 1, 1, 5, 2,    1, 2, 2, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 1, 2, 2, 2, 1,
	2, 1, 2, 1, 1, 2,    1, 1, 2, 2, 2, 1,
	2, 2, 1, 5, 1, 2,    1, 1, 2, 2, 1, 2,
	2, 2, 1, 2, 1, 1,    2, 1, 1, 2, 1, 2,
	2, 2, 1, 2, 1, 2,    1, 5, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2,    1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2,    2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 6,    1, 2, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2,    1, 2, 2, 1, 2, 2,
	
	/* 1981 */     
	1, 2, 1, 1, 2, 1,    1, 2, 2, 1, 2, 2,
	2, 1, 2, 3, 2, 1,    1, 2, 2, 1, 2, 2,
	2, 1, 2, 1, 1, 2,    1, 1, 2, 1, 2, 2,
	2, 1, 2, 2, 1, 1,    2, 1, 1, 5, 2, 2,
	1, 2, 2, 1, 2, 1,    2, 1, 1, 2, 1, 2, 
	1, 2, 2, 1, 2, 2,    1, 2, 1, 2, 1, 1,
	2, 1, 2, 2, 1, 5,    2, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1,    2, 2, 1, 2, 2, 1,
	2, 1, 1, 2, 1, 2,    1, 2, 2, 1, 2, 2,
	1, 2, 1, 1, 5, 1,    2, 1, 2, 2, 2, 2, 

	/* 1991 */     
	1, 2, 1, 1, 2, 1,    1, 2, 1, 2, 2, 2,
	1, 2, 2, 1, 1, 2,    1, 1, 2, 1, 2, 2,
	1, 2, 5, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 2, 2, 1, 2, 1,    2, 1, 1, 2, 1, 2,
	1, 2, 2, 1, 2, 2,    1, 5, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 1,    2, 1, 2, 2, 1, 2,
	1, 1, 2, 1, 2, 1,    2, 2, 1, 2, 2, 1,
	2, 1, 1, 2, 3, 2,    2, 1, 2, 2, 2, 1,
	2, 1, 1, 2, 1, 1,    2, 1, 2, 2, 2, 1,
	2, 2, 1, 1, 2, 1,    1, 2, 1, 2, 2, 1, 

	/* 2001 */     
	2, 2, 2, 3, 2, 1,    1, 2, 1, 2, 1, 2,
	2, 2, 1, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 2, 1, 2, 2, 1,    2, 1, 1, 2, 1, 2,
	1, 5, 2, 2, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2,    2, 1, 2, 2, 1, 1, 
	2, 1, 2, 1, 2, 1,    5, 2, 2, 1, 2, 2,
	1, 1, 2, 1, 1, 2,    1, 2, 2, 2, 1, 2,
	2, 1, 1, 2, 1, 1,    2, 1, 2, 2, 1, 2,
	2, 2, 1, 1, 5, 1,    2, 1, 2, 1, 2, 2,
	2, 1, 2, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	
	/* 2011 */    
	2, 1, 2, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 1, 6, 2, 1, 2,    1, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 2,    1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2,    1, 2, 5, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 2, 2, 1, 2, 1, 
	2, 1, 2, 1, 1, 2,    1, 2, 2, 1, 2, 2,
	1, 2, 1, 2, 3, 2,    1, 2, 1, 2, 2, 2,
	1, 2, 1, 2, 1, 1,    2, 1, 2, 1, 2, 2,
	2, 1, 2, 1, 2, 1,    1, 2, 1, 2, 1, 2,
	2, 1, 2, 5, 2, 1,    1, 2, 1, 2, 1, 2, 

	/* 2021 */     
	1, 2, 2, 1, 2, 1,    2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2,    1, 2, 1, 2, 1, 2,
	1, 5, 2, 1, 2, 1,    2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 5,    2, 1, 2, 2, 2, 1,
	2, 1, 2, 1, 1, 2,    1, 2, 1, 2, 2, 2,
	1, 2, 1, 2, 1, 1,    2, 1, 1, 2, 2, 2,
	1, 2, 2, 1, 5, 1,    2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1,    1, 2, 1, 1, 2, 2,
	1, 2, 1, 2, 2, 1,    2, 1, 2, 1, 2, 1,

	/* 2031 */    
	2, 1, 5, 2, 1, 2,    2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2,    2, 1, 2, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    2, 1, 2, 2, 5, 2,
	1, 2, 1, 1, 2, 1,    2, 1, 2, 2, 2, 1,
	2, 1, 2, 1, 1, 2,    1, 1, 2, 2, 1, 2,
	2, 2, 1, 2, 1, 4,    1, 1, 2, 1, 2, 2,
	2, 2, 1, 2, 1, 1,    2, 1, 1, 2, 1, 2,
	2, 2, 1, 2, 1, 2,    1, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 5, 2,    1, 2, 1, 2, 1, 1,
	2, 1, 2, 2, 1, 2,    2, 1, 2, 1, 2, 1,  

	/* 2041 */     
	2, 1, 1, 2, 1, 2,    2, 1, 2, 2, 1, 2,
	1, 5, 1, 2, 1, 2,    1, 2, 2, 2, 1, 2,
	1, 2, 1, 1, 2, 1,    1, 2, 2, 1, 2, 2,  
};  

typedef struct _lunar_info
{
	unsigned short	year_lunar;		// 음력 변환후 년도 (양력과 다를 수 있음)
	unsigned short  year_dangi;		// 당해년도 단기
	unsigned char	month;			// 음력 변환후 달 
	unsigned char	day;			// 음력 변환후 일
	unsigned char	dayofweek;		// 주중 요일을 숫자로 ( 0:일, 1:월 ... 6:토)
	bool			isyoondal;		// 윤달 여부 0:평달/1:윤달
	char			h_year[5];		// 당해 년도 갑자표기 (한글)
	char			h_day1[3];		// 요일 (한글)
	char			h_day2[5];		// 당일 갑자표기 (한글)
	char			h_ddi[7];		// 당해 년도 띠 표기 (한글)
	char			c_year[5];		// 당해 년도 갑자표기 (한자)
	char			c_day1[3];		// 요일 (한자)
	char			c_day2[5];		// 당일 갑자표기 (한자)
} lunar_t;


typedef struct _solar_info
{
	unsigned short	year;			// 양력 변환후 년도 (음력과 다를 수 있음)
	unsigned char	month;			// 양력 변환후 달 
	unsigned char	day;			// 양력 변환후 일
	unsigned char	dayofweek;		// 주중 요일을 숫자로 ( 0:일, 1:월 ... 6:토)
} solar_t;

static const char* _info_gan[10] = 
{ 
	"갑","을","병","정","무","기","경","신","임","계" 
};
static const char* _info_gan2[10] = 
{ 
	"甲","乙","丙","丁","戊","己","庚","辛","壬","癸" 
};

static const char* _info_gee[12] = 
{ 
	"자","축","인","묘","진","사","오","미","신","유","술","해"
};

static const char* _info_gee2[12] = 
{ 
	"子","丑","寅","卯","辰","巳","午","米","申","酉","戌","亥"
};

static const char* _info_ddi[12] = 
{ 
	"쥐","소","범","토끼","용","뱀","말","양","원숭이","닭","개","돼지" 
};

static const char* _info_week[7] = 
{ 
	"일","월","화","수","목","금","토" 
};

static const char* _info_week2[7] = 
{ 
	"日","月","火","水","木","金","土"
};

static int _info_month[12] = 
{ 
	31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
};

// 이 음력 계산은 1841 ~ 2043 년도 범위에서 정확도를 제공합니다.
// 만약 정확한지 검사해보고 싶다면 다음 사이트에서 비교해 보시오.
// http://www.koreamanse.com/hotservice/yangumch/yangumch.html?mode=2
// http://ruby.kisti.re.kr/~manse/ <= 한국 과학기술 연구원
BOOL SolarToLunar(int Year, int Month, int Day, lunar_t& lunar);
BOOL LunarToSolar(int Year, int Month, int Day, BOOL Leaf, solar_t& solar);

static void febdays(int y)
{
	_info_month[1] = 28;

	if(y%4 == 0)
	{
		if(y%100 == 0 && y%400 == 0)
			return;
	}
	else
		return;

	_info_month[1] = 29;
}

/*
int main()
{
	lunar_t lunar;
	solar_t solar;

	int year, month, day;

	cout << "양력 년 월 일을 입력하세요 ( 2007 10 11 ) : ";
	cin >> year >> month >> day;
	cout << endl;

	SolarToLunar(year, month, day, lunar);
	cout << "음력 : " << lunar.year_lunar << " 년 " <<
		(int)lunar.month << " 월 " << (int)lunar.day << " 일" << endl;
	cout << "단기 : " << lunar.year_dangi << " 년" << endl;
	cout << lunar.c_year << " 년 " << lunar.c_day1 << " 요일 " << lunar.c_day2 << " 일" << endl;
	cout << endl;
	
	cout << "음력 년 월 일을 입력하세요 ( 2007 10 11 ) : ";
	cin >> year >> month >> day;
	cout << endl;

	LunarToSolar(year, month, day, FALSE, solar);
	cout << "양력 " << solar.year << " 년 " << (int)solar.month << " 월 " <<
		(int)solar.day << " 일 " << (int)solar.dayofweek << " 요일" << endl;

	return 0;
}
*/

BOOL SolarToLunar(int Year, int Month, int Day, lunar_t& lunar)
{
	if(Year < 1841 || 2043 < Year)
	{
		cerr << "이 프로그램은 1841 ~ 2043 까지만 지원합니다." << endl;
		return FALSE;
	}

	if(Month < 1 || 12 < Month)
	{
		cerr << "1 ~ 12 사이 값을 입력하세요." << endl;
		return FALSE;
	}

	febdays(Year);

	if(Day < 1 || _info_month[Month-1] < Day)
	{
		cerr << "1 ~ " << _info_month[Month-1] << " 사이 값을 입력하세요." << endl;
		return FALSE;
	}

	int ly, lm, ld;
	int m1, m2, mm, i, j, w;
	int sy = Year, sm = Month, sd = Day;
	long td, td1, td2;
	int dt[203], k1, k2;
	BOOL Yoon = FALSE;

	td1 = 1840 * 365L + 1840/4 - 1840/100 + 1840/400 + 23;
	td2 = (sy-1) * 365L + (sy-1)/4 - (sy-1)/100 + (sy-1)/400 + sd;

	for(i=0; i<sm-1; i++) 
		td2 += _info_month[i];

	td = td2 - td1 + 1;

	for(i=0; i<=sy-1841; i++)
	{
		dt[i] = 0;
		for(j=0; j<12; j++) 
		{
			switch( _info_array[i][j] ) 
			{
				case 1 : mm = 29;
					     break;
				case 2 : mm = 30;
					     break;
				case 3 : mm = 58;   /* 29+29 */
					     break;
                case 4 : mm = 59;   /* 29+30 */
					     break;
                case 5 : mm = 59;   /* 30+29 */
					     break;
				case 6 : mm = 60;   /* 30+30 */
					     break;
			}
			dt[i] += mm;
		}
	}
	ly = 0;	

	while(1) 
	{
		if( td > dt[ly] ) 
		{
			td -= dt[ly];
			ly++;
		} 
		else 
			break;
	}
	lm = 0;

	while(1) 
	{
		if( _info_array[ly][lm] <= 2 ) 
		{
			mm = _info_array[ly][lm] + 28;
			if( td > mm ) 
			{
				td -= mm;
				lm++;
			} 
			else 
				break;
		} 
		else 
		{
			switch( _info_array[ly][lm] ) 
			{
				case 3 : m1 = 29;
					 m2 = 29;
					 break;					
				case 4 : m1 = 29;
					 m2 = 30;
					 break;
				case 5 : m1 = 30;
					 m2 = 29;
					 break;
				case 6 : m1 = 30;
					 m2 = 30;
					 break;
			}

			if( td > m1 )
			{
				td -= m1;
				if( td > m2 )
				{
					td -= m2;
					lm++;
				} 
				else 
				{
					Yoon = TRUE;
					break;
				}
			} 
			else 
				break;
		}
	}
	
	ly += 1841;
	lm += 1;
	ld = (Year%400==0 || Year%100!=0 || Year%4==0) ? td : td -1;
	w = td2 % 7;
	i = (td2+4) % 10;
	j = (td2+2) % 12;
	k1 = (ly+6) % 10;
	k2 = (ly+8) % 12;

	lunar.day = ld;
	strcpy(lunar.h_ddi, _info_ddi[k2]);

	strcpy(lunar.h_day1, _info_week[w]);
	
	strcpy(lunar.h_day2, _info_gan[i]);
	strcat(lunar.h_day2, _info_gee[j]);
	
	strcpy(lunar.h_year, _info_gan[k1]);
	strcat(lunar.h_year, _info_gee[k2]);

	strcpy(lunar.c_day1, _info_week2[w]);
	
	strcpy(lunar.c_day2, _info_gan2[i]);
	strcat(lunar.c_day2, _info_gee2[j]);
	
	strcpy(lunar.c_year, _info_gan2[k1]);
	strcat(lunar.c_year, _info_gee2[k2]);

	lunar.isyoondal = Yoon ? true : false;
	lunar.month = lm;
	lunar.year_dangi = sy+2333;
	lunar.year_lunar = ly;
	lunar.dayofweek = w;

	return TRUE;
}

BOOL LunarToSolar(int Year, int Month, int Day, BOOL Leaf, solar_t& solar)
{
	if(Year < 1841 || 2043 < Year)
	{
		cerr << "이 프로그램은 1841 ~ 2043 까지만 지원합니다." << endl;
		return FALSE;
	}

	if(Month < 1 || 12 < Month)
	{
		cerr << "1 ~ 12 사이 값을 입력하세요." << endl;
		return FALSE;
	}

	int lyear, lmonth, lday, leapyes;
	int syear, smonth, sday;
	int mm, y1, y2, m1;
	int i, j, k1, k2, leap, w;
	long td, y;
	lyear = Year;
	lmonth = Month;
	y1 = lyear - 1841;
	m1 = lmonth - 1;
	leapyes = 0;
	if( _info_array[y1][m1] > 2)
		leapyes = Leaf;
	if( leapyes == 1) 
	{
		switch( _info_array[y1][m1] ) 
		{
			case 3 :
			case 5 : 
				mm = 29;
				break;
			case 4 :
			case 6 : 
				mm = 30;
				break;
		}
	} 
	else 
	{
		switch( _info_array[y1][m1] )
		{
			case 1 :
           	case 3 :
           	case 4 : 
				mm = 29;
				break;
			case 2 :
			case 5 :
			case 6 : 
				mm = 30;
				break;
		}
	}
	
	if(Day < 1 || mm < Day)
	{
		cerr << "1 ~ " << mm << " 사이 값을 입력하세요." << endl;
		return FALSE;
	}

	lday = Day;
	td = 0;
	for(i=0; i<y1; i++)
	{
		for(j=0; j<12; j++)
		{
			switch( _info_array[i][j] ) 
			{
				case 1 : 
					td += 29;
					 break;
				case 2 : 
					td += 30;
					 break;
				case 3 : 
					td += 58;   // 29+29
					 break;
				case 4 : 
					td += 59;   // 29+30
				     break;
				case 5 : 
					td += 59;   // 30+29 
					 break;
				case 6 : 
					td += 60;   // 30+30 
					 break;
			}
		}
	}
	
	for (j=0; j<m1; j++)
	{
		switch( _info_array[y1][j] ) 
		{
			case 1 : 
				td +=29;
				break;
			case 2 : 
				td += 30;
				break;
			case 3 : 
				td += 58;   // 29+29
				break;
			case 4 : 
				td += 59;   // 29+30
				break;
			case 5 : 
				td += 59;   // 30+29 
				break;
			case 6 : 
				td += 60;   // 30+30
				break;
		}
	}

	if( leapyes == 1 )
	{
		switch( _info_array[y1][m1] ) 
		{
			case 3 :
			case 4 : 
				td += 29;
				break;
			case 5 :
			case 6 : 
				td += 30;
				break;
		}
	}
	td += lday + 22;
	// td : 1841년 1월 1일부터 원하는 날까지의 전체 날수의 합 
	
	y1 = 1840;
	do {
		y1++;
		leap = (y1 % 400 == 0) || (y1 % 100 != 0) && (y1 % 4 ==0);
		if(leap) 
			y2 = 366;
		else     
			y2 = 365;
		if(td <= y2) 
			break;
		td -= y2;
	} while(1);
	
	syear = y1;
	_info_month[1] = y2 - 337;
	m1 = 0;
	do 
	{
		m1++;
		if( td <= _info_month[m1-1] ) 
			break;
		td -= _info_month[m1-1];
	} while(1);

	smonth = m1;
	sday = td;
	y = syear - 1;
	td = y * 365L + y/4 - y/100 + y/400;
	for(i=0; i<smonth-1; i++) td += _info_month[i];
	td += sday;
	w = td % 7;
	
	i = (td + 4) % 10;
	j = (td + 2) % 12;
	k1 = (lyear + 6) % 10;
	k2 = (lyear + 8) % 12;

	solar.year = syear;
	solar.month = smonth;
	solar.day = sday;
	solar.dayofweek = w;

	return TRUE;
}

