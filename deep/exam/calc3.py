
import numpy as np
import json

res = [False]*19
ans_org = """
여기에 기입하세요.
"""
ans_org2 = """
여기에 기입합니다.
"""

s_vec_org = np.array([ 1.53313726e-02,  5.66273928e-03, -1.78994983e-03, -2.87434757e-02,
       -2.07333863e-02, -1.93091035e-02, -3.82125378e-02,  1.57132447e-02,
        9.82350856e-03,  6.59676790e-02, -1.76586956e-02, -1.06142461e-02,
       -5.05426228e-02,  4.48937416e-02,  6.36101440e-02, -2.35155653e-02,
       -6.85719252e-02, -2.06963420e-02, -3.64559889e-03,  1.71990693e-02,
        3.24335396e-01, -1.04568303e-02, -2.66741604e-01, -2.26300359e-02,
       -1.61768496e-03,  2.13036537e-02,  1.05258171e-02,  1.36346072e-02,
       -3.66714597e-02,  7.08618760e-03,  4.50456142e-03, -3.81748676e-02,
        1.71422958e-04,  6.68136775e-03,  4.22632694e-03, -1.43558040e-01,
       -3.01000327e-02,  8.19271803e-03,  4.06503677e-05,  1.24588162e-02,
       -5.48368469e-02, -2.57603824e-02,  1.17362320e-01,  5.39080799e-03,
       -1.21126771e-02,  1.19921565e-02,  7.27847219e-03, -6.99496269e-03,
       -9.53411981e-02,  9.05304849e-02,  6.91781342e-02, -1.19842589e-03,
       -2.28463456e-01,  4.65707630e-02,  4.85038757e-03,  3.91665101e-03,
       -1.56099498e-02, -3.09490021e-02,  3.35350633e-03, -1.42705441e-03,
        1.52496668e-02,  3.18340212e-03,  4.59236726e-02,  1.52410209e-01,
       -8.30531120e-02, -8.67560506e-02,  1.68371648e-02,  2.39049494e-02,
       -1.47235841e-02,  2.39927024e-02, -3.33324969e-02, -9.82305408e-03,
        2.46826410e-02, -6.39653578e-02,  3.49664595e-03,  1.30876556e-01,
        2.08720863e-02, -1.34207606e-01,  2.69860029e-03,  2.47362256e-03,
        5.63554466e-03, -7.35965371e-03,  2.50441283e-02, -1.39479935e-02,
       -1.16766989e-02,  7.51504302e-03, -4.87907119e-02,  1.83241367e-02,
       -5.46420738e-03, -2.96650827e-02,  6.93371892e-03,  2.95262560e-02,
       -1.35381967e-02,  3.16416323e-02,  2.43120551e-01,  3.76524627e-02,
       -7.14421272e-03, -7.26898015e-03, -1.42545655e-01, -5.46044111e-03,
        8.27223435e-02, -6.21004701e-02, -3.44334021e-02, -4.21988964e-02,
        7.41563290e-02,  1.41516924e-02, -5.61582204e-03,  7.13703036e-03,
       -3.04263756e-02,  3.69220376e-02,  9.51302797e-03, -4.99022007e-02,
       -3.02103162e-02,  2.28764415e-02, -3.37454677e-02, -9.91978645e-02,
       -2.85097957e-02,  1.31790817e-01,  1.71521604e-02, -1.46478117e-02,
       -2.56755471e-01,  2.40115374e-02,  1.43353269e-02, -1.44901872e-03,
       -1.90313756e-01, -1.05941594e-02,  3.40494215e-02, -1.29993632e-02,
       -2.16791630e-02, -2.41439659e-02,  6.39870763e-04, -1.49673820e-02,
        3.14983428e-02, -4.99451160e-03,  2.41142154e-01, -2.11060047e-04,
       -1.54431015e-02, -2.56183803e-01,  2.56202519e-02,  5.01646847e-03,
       -9.75528210e-02,  1.88647509e-02, -2.50745565e-03,  1.92561388e-01,
        2.34982558e-02, -3.91083211e-03, -2.04864088e-02, -3.49344313e-03,
       -9.78720635e-02, -8.70805979e-03, -1.12041235e-02,  1.04458332e-02,
        1.21358633e-02, -1.39913023e-01, -6.35067970e-02,  9.45508480e-04,
       -2.28904560e-03, -2.25247256e-02,  6.18875325e-02, -1.04636252e-01,
        1.67267472e-02,  5.10109663e-02,  1.87138170e-02, -2.22860016e-02,
       -3.54778767e-03, -4.29705679e-02, -5.10387123e-04, -7.62343407e-05,
       -2.52476111e-02,  1.45697743e-02, -1.79923885e-02,  2.17427798e-02,
       -8.64383578e-03, -8.94292071e-03,  7.45254755e-02, -1.42831951e-02,
        3.13322842e-02,  1.46007985e-02, -7.51691759e-02, -2.06373408e-02,
       -1.59038454e-02, -2.98280835e-01, -1.54180471e-02,  5.80120496e-02,
       -5.85240126e-03,  8.45924020e-03, -6.91872835e-03, -7.98635185e-04,
        3.02622318e-02, -1.14828125e-02, -4.29656357e-03,  3.34106833e-02,
       -5.00775576e-02,  2.88792998e-02,  5.79264164e-02, -3.10729817e-03,
        1.87472403e-02, -1.13794208e-02, -3.74623537e-02, -1.17577016e-02],
      dtype='float32')

try:
    if ans01 != ans_org and len(ans01) > 5:
        res[0] = ans01
except:
    pass

try:
    if ans02 != ans_org and len(ans02) > 5:
        res[1] = ans02
except:
    pass

ans03_result = np.array([[-2.3020873 , -0.991025  ],
       [ 0.69401145, -0.3911167 ],
       [ 0.5349574 ,  0.23779663],
       [-0.90470374,  1.0663645 ]], dtype='float32')

try:
    if np.sum(np.abs(ans03[0:4] - ans03_result)) < 12.0:
        res[2] = True
except:
    pass

try:
    if ans04 != ans_org and len(ans04) > 5:
        res[3] = ans04
except:
    pass

try:
    if ans05 != ans_org and len(ans05) > 5:
        res[4] = ans05
except:
    pass

#2번과제

try:
    if ans06 != ans_org and len(ans06) > 5:
        res[5] = ans06
except:
    pass

try:
    if ans07 != ans_org and len(ans07) > 5:
        res[6] = ans07
except:
    pass

try:
    if ans08 != ans_org and len(ans08) > 5:
        res[7] = ans08
except:
    pass

ans09_org = '008629.jpg'
try:
    if ans09 != ans_org and len(ans09) > 5:
        res[8] = ans09
except:
    pass

ans10_org = np.array([ 0.51165247, -1.1973262 , -0.18806714,  0.3593927 ], dtype='float32')
try:
    if np.sum(np.abs(ans10_org-ans10[0:4])) < 0.001:
        raise
    if 1. - np.dot((ans11 - ans10)/4., s_vec_org) < 0.05:
        res[9] = True
        res[10] = True
        with open('z_end.npy', 'wb') as f:
            np.save(f, ans11)
except:
    pass

# 3번과제
try:
    if ans12 != ans_org2 and len(ans12) > 5:
        res[11] = ans12
except:
    pass

try:
    if ans13 != ans_org2 and len(ans13) > 5:
        res[12] = ans13
except:
    pass

try:
    if ans14 == 248:
        res[13] = True
except:
    pass

try:
    if ans15 == 250:
        res[14] = True
except:
    pass

try:
    if np.abs(ans16 - 0.63009010) < 0.002:
        res[15] = True
except:
    pass

try:
    if np.abs(ans17 - 0.82760245) < 0.002:
        res[16] = True
except:
    pass

try:
    if np.abs(ans18 - 0.53981805) < 0.002:
        res[17] = True
except:
    pass

ans19_org = """
여기에 적어주세요.
"""

try:
    if ans19 != ans19_org:
        res[18] = ans19
    else:
        res[18] = ''
except:
    pass

resdict = {}
resdict['res'] = res
res_array = res.copy()
for i, r in enumerate(res_array):
    if type(r) == np.bool_ or type(r) == bool:
        res_array[i] = str(r)

false_array = np.array(['False']*23)
score = 0.
# 1번: 
wrong_cnt = (res_array[0:5] == false_array[0:5]).astype('int').sum()
score += (5 - wrong_cnt)/5.*33.
# 2번: 
wrong_cnt = (res_array[5:11] == false_array[5:11]).astype('int').sum()
score += (6 - wrong_cnt)/6.*33.
# 3번: 
wrong_cnt = (res_array[11:18] == false_array[11:18]).astype('int').sum()
score += (7 - wrong_cnt)/7.*34.

resdict['score'] = score

for i, r in enumerate(res):
    if type(r) == np.bool_:
        res[i] = bool(r)

with open('./result.json','w', encoding='UTF-8') as f:
    json.dump(resdict, f, indent=4, ensure_ascii=False)
