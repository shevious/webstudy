{"version":3,"file":"static/webpack/static/development/pages/effect.js.0ff3d200acfb539f4b2a.hot-update.js","sources":["webpack:///./pages/effect.js"],"sourcesContent":["import React from 'react';\nimport SwipeableViews from './SwipeableViews.js';\nimport Animated from 'animated/lib/targets/react-dom';\n\nconst styles = {\n  root: {\n    background: '#000',\n    padding: '50px 50px',\n  },\n  slideContainer: {\n    height: 400,\n  },\n  slide: {\n    //padding: 15,\n    minHeight: 400,\n    color: '#fff',\n  },\n  slide1: {\n    backgroundColor: '#FEA900',\n  },\n  slide2: {\n    backgroundColor: '#B3DC4A',\n  },\n  slide3: {\n    backgroundColor: '#6AC0FF',\n  },\n  img: {\n    width: 400,\n    height: 400,\n    display: 'block',\n    marginBottom: 16,\n  },\n};\n\nclass VirticalSwipeView extends SwipeableViews {\n}\n\nconst albums = [\n  {\n    name: 'Abbey Road',\n    src: 'https://react-swipeable-views.com/static/album-art-1.jpg',\n  },\n  {\n    name: 'Bat Out of Hell',\n    src: 'https://react-swipeable-views.com/static/album-art-2.jpg',\n  },\n  {\n    name: 'Homogenic',\n    src: 'https://react-swipeable-views.com/static/album-art-3.jpg',\n  },\n];\n\nclass Effect extends React.Component {\n  state = {\n    index: 0,\n    position: new Animated.Value(0),\n  };\n\n  handleChangeIndex = index => {\n    this.setState({ index });\n  };\n\n  handleSwitch = (index, type) => {\n    if (type === 'end') {\n      Animated.spring(this.state.position, { toValue: index }).start();\n      return;\n    }\n    this.state.position.setValue(index);\n  };\n\n  getstyle = (i) => {\n    if (i%3 == 0)\n      return styles.slide1;\n    else if (i%3 == 1)\n      return styles.slide2;\n    else\n      return styles.slide3;\n  }\n\n/* containerStyle={styles.slideContainer} */\n\n  render() {\n    const { index, position } = this.state;\n    console.log(\"position = \", position);\n    return (\n      <VirticalSwipeView\n        index={index}\n        style={styles.root}\n        enableMouseEvents axis=\"x\" resistance\n        onChangeIndex={this.handleChangeIndex}\n        onSwitching={this.handleSwitch}\n      >\n        {albums.map((album, currentIndex) => {\n          const inputRange = albums.map((_, i) => i);\n/*\n*/\n          console.log(\"currentIndex=\", currentIndex);\n          console.log(\"index=\", this.state.index);\n          console.log(\"inputRange=\", inputRange);\n          const scale = position.interpolate({\n            inputRange,\n            outputRange: inputRange.map(i => {\n              //return currentIndex === i ? 1 : 0.7;\n              return 1;\n            }),\n          });\n          const opacity = position.interpolate({\n            inputRange,\n            outputRange: inputRange.map(i => {\n              if (currentIndex == this.state.index)\n                return currentIndex == i ? 1 : 0.3;\n              else\n                return 1;\n            }),\n          });\n          const outtt = inputRange.map(i => {\n              if (i == currentIndex)\n                return 0;\n              else if (i < currentIndex)\n                return 200;\n              else\n                return -200;\n          })\n          console.log(\"outtt=\",outtt);\n          const translateX = position.interpolate({\n            inputRange,\n            outputRange: inputRange.map(i => {\n              if (currentIndex == this.state.index)\n                if (i == currentIndex)\n                  return 0;\n                else if (i < currentIndex)\n                  return -400;\n                else\n                  return 400;\n              else if (currentIndex > this.state.index)\n                return 0;\n              else \n                return 0;\n        \n/*\n              if (i == this.state.index)\n                return 0;\n              return -200;\n              if (i == currentIndex)\n                return 0;\n              else if (i < currentIndex)\n                return 200;\n              else\n                return -200;\n              if (i == currentIndex)\n                return (100 / 2) * (i - currentIndex);\n              else\n                return 100/2 * (i - currentIndex);\n*/\n            }),\n          });\n          console.log(\"inputRange=\",inputRange);\n          //console.log(translateY);\n          const slidestyle = this.getstyle(currentIndex);\n\n          console.log(album.src);\n          return (\n            <Animated.div\n              key={String(currentIndex)}\n              style={Object.assign(\n                {\n                  opacity,\n                  transform: [{ scale }, { translateX }],\n                },\n                styles.slide,\n                slidestyle,\n              )}\n            >\n              <img style={styles.img} src={album.src} alt=\"cover\" />\n              {album.name}\n            </Animated.div>\n          );\n        })}\n      </VirticalSwipeView>\n    );\n  };\n};\n\nexport default Effect;\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAtBA;AACA;AA6BA;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;;;;;;;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAIA;AAPA;AASA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAYA;;;;;;;;;;;;;;;AAeA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;;;;AAhIA;AACA;AAgIA;AAEA;;;;A","sourceRoot":""}